package zombies;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import org.apache.commons.lang3.StringUtils;

public class Zombie {

	public static void main(String[] args) throws IOException {
		Scanner scanner = new Scanner(new File("C:/Users/admin/Downloads/fighting_the_zombie_example_input.txt"));
		FileWriter writer = new FileWriter( "C:/Users/admin/Downloads/B.txt");
		int T=Integer.parseInt(scanner.nextLine());
        for(int i=1;i<=T;i++){
        	float result=(float) 0.0;
        	ArrayList<Float> Prob_Values =new ArrayList<Float>();
        	String[] scan = StringUtils.split(scanner.nextLine());
        	int H=Integer.parseInt(scan[0].trim());
        	System.out.println("H="+H);
        	int S=Integer.parseInt(scan[1].trim());
        	System.out.println("S="+S);
        	String[] spell = StringUtils.split(scanner.nextLine());
        	for(int j=0;j<S;j++){
        		System.out.println(spell[j].trim());
        		 String[] data = (spell[j].trim()).split("d|[+]|-");
        		 int[] myIntArray=new int[3];
        		 if(data.length ==2)  myIntArray = new int[]{Integer.parseInt(data[0].trim()),Integer.parseInt(data[1].trim()),0};
        		 else if((spell[j].trim()).contains("-")) myIntArray = new int[]{Integer.parseInt(data[0].trim()),Integer.parseInt(data[1].trim()),(-1)*(Integer.parseInt(data[2].trim()))};
        		 else myIntArray = new int[]{Integer.parseInt(data[0].trim()),Integer.parseInt(data[1].trim()),Integer.parseInt(data[2].trim())};
        	        System.out.println(Arrays.toString(myIntArray));
        	        Map<Integer, Integer> initial = new HashMap<Integer, Integer>(); 
        	        Map<Integer, Integer> finish = new HashMap<Integer, Integer>();
        	        for(int k=1;k<=myIntArray[1];k++) initial.put(k,1);
        	        if(myIntArray[0]==1) finish.putAll(initial);
        	        else{
        	          for(int l=2;l<=myIntArray[0];l++){
        	        	   for(int k=1;k<=myIntArray[1];k++){
        	        		         for(int g: initial.keySet()){
        	        		        	 int key =g+k;
        	        		        	   if(!(finish.containsKey(key))) finish.put(key, 1);
        	        		        	   else{
        	        		        		   int o=finish.get(key);
        	        		        		   finish.put(key, (o+1));
        	        		        	   }
        	        		        	    }
        	        		              }
        	        	   System.out.println("Iteration number: "+l);
        	        	   initial.clear();
        	        	   initial.putAll(finish);
        	        	   for (Map.Entry<Integer, Integer> entry : initial.entrySet())
        	                   System.out.println("key=" + entry.getKey() + ", value=" + entry.getValue());
        	        	   finish.clear();
        	        	   System.out.println("Size of Finish: "+finish.size());
        	        	   }
        	            }  
        	        int su=0, tot=0;
        	      for(int key:initial.keySet()){ 
        	    	  tot=tot+initial.get(key);
        	    	  
        	    	  if(key < H) 
        	    		  su=su+initial.get(key);
        	   }
        	      System.out.println("Total"+tot);
        	      System.out.println("Su"+su);
        	      float b =(float)((float)su/(float)tot);
        	      System.out.printf("%.6f", b);
        	      System.out.println("\n");
        	      Prob_Values.add((float)(1.0f-b));
        	}
        	result =Collections.max(Prob_Values);
           	writer.append("Case #"+i+": "+result);
        	writer.append("\n");
        }
        scanner.close();
        writer.close();
	}

}
